// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  photo       String?
  photo_id    String?
  name        String
  phoneNumber String     @unique
  email       String     @unique
  password    String
  status      UserStatus @default(PENDING)
  role        Role
  created     DateTime   @default(now())
  updated     DateTime   @default(now())
}

model Customer {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String           @unique
  status           CustomerStatus   @default(ACTIVE)
  gender           Gender?
  phone            String           @unique
  birthDate        String?
  password         String
  created          DateTime         @default(now())
  updated          DateTime         @default(now())
  reviews          Review[]
  customerAdresses CustomerAdress[]
  orders           Order[]
}




model CustomerAdress {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  streetName      String
  approach        String
  floor           String
  doorCode        String
  apartmentNumber String
  comment         String
  isDefault       Boolean    @default(false)
  customerId      String     @db.ObjectId
  customer        Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  created         DateTime   @default(now())
  updated         DateTime   @default(now())
}


model Order {
  id                         String        @id @default(auto()) @map("_id") @db.ObjectId
  paymentMethod              PaymentMethod
  paymentStatus              PaymentStatus @default(PENDING)
  change                     String?
  restaurantToClientMessages String[]
  orderNote                  String?
  orderItems                 Json
  orderTotal                 Int
  orderType                  OrderType
  orderStatus                OrderStatus   @default(ORDER_NOT_CONFIRMED)
  customerId                 String        @db.ObjectId
  customer                   Customer      @relation(fields: [customerId], references: [id])
  orderChosenTime            String
  orderReceivingTime         String
  orderCompletionTime        String?
  created                    DateTime      @default(now())
}

model Application {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  role              ApplicantRole
  photoUrl          String
  photoId           String
  firstname         String
  lastname          String
  email             String
  phoneNumber       String
  gender            Gender
  birthDate         DateTime
  passportNumber    String
  passportPhotoUrl  String
  passportPhotoId   String
  noticePeriod      String
  dateOfJoining     DateTime
  applicationStatus ApplicantStatus @default(PENDING)
  education         Education
  martialStatus     MarriageStatus
  experiences       Json[]
  languages         Json[]
  computerSkills    String[]
  source            String
  hasBankAccount    Boolean         @default(false)
  bankAccountName   String?
  resumeUrl         String
  resumeId          String
  drivers           Driver[]
  managers          Manager[]
  teamMembers       TeamMember[]
  created           DateTime        @default(now())
}


model Manager {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  panPhoto        String
  panPhotoId      String
  panNumber       String
  currentEmployer String
  currentRole     String
  currentLocation String
  currentCTC      String
  applicantId     String      @db.ObjectId
  application     Application @relation(fields: [applicantId], references: [id], onDelete: Cascade)
}


model Driver {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  drivingLicence DrivingLicense
  licenseNumber  String
  employmentType EmploymentType
  applicantId    String         @db.ObjectId
  application    Application    @relation(fields: [applicantId], references: [id], onDelete: Cascade)
}


model TeamMember {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  employmentType EmploymentType
  applicantId    String         @db.ObjectId
  application    Application    @relation(fields: [applicantId], references: [id], onDelete: Cascade)
}

model Employee {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  firstname         String
  lastname          String
  email             String         @unique
  phoneNumber       String         @unique
  photo             String
  photo_id          String
  role              ApplicantRole
  salary            Int
  city              String
  addressLine1      String
  addressLine2      String?
  maritalStatus     MarriageStatus
  gender            Gender
  birthDate         DateTime
  created           DateTime       @default(now())
  updated           DateTime       @default(now())
  leaveAmount       Int            @default(0)
  emergancyContacts Json[]
  employeeNotes     Json[]
  leaveDays         Json[]
}


model Message {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  firstname   String
  lastname    String
  phoneNumber String
  email       String
  subject     String
  message     String
  date        DateTime   @default(now())
}


model Review {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  reviewSubject ReviewSubject
  message       String
  status        ReviewStatus  @default(PRIVATE)
  stars         Int
  customerId    String        @db.ObjectId
  customer      Customer      @relation(fields: [customerId], references: [id])
  date          DateTime      @default(now())
}
model Feedback {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  type              FeedbackType
  fullName          String
  gender            Gender
  email             String
  mobileNumber      String
  status            FeedbackStatus     @default(NOT_EXAMINED)
  feedback          String
  rating            Float
  experience        String
  created           DateTime           @default(now())
  deliveryFeedbacks DeliveryFeedback[]
  dineInFeedbacks   DineInFeedback[]
}



model DeliveryFeedback {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  dateOfOrder      DateTime
  timeOfOrder      String
  feedbackOn       FeedbackOn
  feedbackOnChoice String
  feedbackId       String      @db.ObjectId
  feedback         Feedback    @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
}


model DineInFeedback {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  dateOfVisit DateTime
  timeOfVisit String
  visitAmount VisitAmount
  feedbackId  String      @db.ObjectId
  feedback    Feedback    @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  description String
  photo       String
  photo_id    String
  created     DateTime   @default(now())
  updated     DateTime   @default(now())
  pizzas      Pizza[]
  dips        Dip[]
  menuItems   MenuItem[]
}



model Topping {
  id           String              @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  type         ToppingCategoryType
  forPizzaSize ToppingForPizzaSize
  light        Int                 @default(0)
  standard     Int                 @default(0)
  double       Int                 @default(0)
  extra        Int                 @default(0)
  created      DateTime            @default(now())
  updated      DateTime            @default(now())
}


model Pizza {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String     @unique
  vegan      Boolean    @default(false)
  soldAmount Int        @default(0)
  status     Status     @default(PENDING)
  spiceLevel SpiceLevel
  pizzaSizes PizzaSize[]
  created    DateTime   @default(now())
  updated    DateTime   @default(now())
  categoryId String     @db.ObjectId
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}


model PizzaSize {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  size             Size
  price            String
  orderedAmount    Int        @default(0)
  photo            String
  photo_id         String
  circumfarance    String
  weight           String
  nutritionalValue Json
  slices           Json[]
  crusts           Json[]
  edges            Json[]
  standardToppings Json[]
  extraToppings    Json[]
  pizzaId          String     @db.ObjectId
  pizza            Pizza      @relation(fields: [pizzaId], references: [id], onDelete: Cascade)
}


model MenuItem {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  type          MenuItemType
  name          String       @unique
  description   String
  vegan         Boolean      @default(false)
  soldAmount    Int          @default(0)
  status        Status       @default(PENDING)
  calories      String
  fats          String
  proteins      String
  carbohydrates String
  spiceLevel    SpiceLevel   @default(NOT_SPICY)
  pieces        Json[]
  created       DateTime     @default(now())
  updated       DateTime     @default(now())
  categoryId    String       @db.ObjectId
  category      Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Dip {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  dataType         String     @default("DIP")
  type             String     @unique
  price            Int        @default(0)
  photo            String
  photo_id         String
  vegan            Boolean    @default(false)
  soldAmount       Int        @default(0)
  status           Status     @default(PENDING)
  weight           Float
  nutritionalValue Json
  created          DateTime   @default(now())
  updated          DateTime   @default(now())
  categoryId       String     @db.ObjectId
  category         Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}


enum Role {
  ADMIN
  SUB_ADMIN
  DRIVER
}

enum Size {
  SMALL
  MEDIUM
  LARGE
}

enum Status {
  PENDING
  ACTIVE
  INACTIVE
}

enum UserStatus {
  PENDING
  ACTIVE
  BLOCKED
}

enum CustomerStatus {
  ACTIVE
  BLOCKED
}

enum Gender {
  MALE
  FEMALE
}

enum ApplicantRole {
  TEAM_MEMBER
  DRIVER
  MANAGER
  AREA_COACH
}

enum ApplicantStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Education {
  NO_EDUCATION
  HIGH_SCHOOL
  GRADUATE
  POST_GRADUATE
}

enum MarriageStatus {
  MARRIED
  SINGLE
}

enum DrivingLicense {
  A1
  A
  B
  C
}

enum EmploymentType {
  PART_TIME
  FULL_TIME
}

enum ContactType {
  PRIMARY
  SECONDARY
  TERTIARY
  LEASE_IMPORTANT
}

enum ReviewSubject {
  DRIVER
  STUFF
  MANAGER
  RESTAURANT
  FOOD
  OTHER
}

enum ReviewStatus {
  PUBLIC
  PRIVATE
}

enum FeedbackType {
  DELIVERY
  DINE_IN
}

enum FeedbackOn {
  HYGIENE
  HOSPITALITY
  ACCURACY
  SPEED
  CALL_CENTRE
  PRODUCT_QUALITY
  ONLINE_ORDER
}

enum VisitAmount {
  WEEKLY
  MONTHLY
  OCCASIONALY
  FIRST_TIME
}

enum FeedbackStatus {
  NOT_EXAMINED
  EXAMINED
}

enum ToppingCategoryType {
  STANDARD
  EXTRA
}

enum ToppingForPizzaSize {
  SMALL
  MEDIUM
  LARGE
}

enum SpiceLevel {
  NOT_SPICY
  MILD
  HOT
}

enum MenuItemType {
  DRINKS
  SNACKS
  DESSERTS
  SALADS
}

enum PaymentMethod {
  CASH
  CARD
}

enum PaymentStatus {
  PENDING
  APPROVED
  DECLINED
}

enum OrderType {
  DELIVERY
  PICKUP
}

enum OrderStatus {
  ORDER_NOT_CONFIRMED
  ORDER_CANCELLED
  ORDER_CONFIRMED
  ORDER_BEING_PREPARED
  ORDER_BOXED
  ORDER_DELIVERED
  ORDER_PICKED_UP
}
