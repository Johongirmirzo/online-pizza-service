// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          Int        @id @default(autoincrement())
    photo       String?
    photo_id    String?
    name        String     @db.VarChar(50)
    phoneNumber String     @unique
    email       String     @unique
    password    String
    status      UserStatus @default(PENDING)
    role        Role
    created     DateTime   @default(now())
    updated     DateTime   @default(now())
}

model Customer {
    id               Int              @id @default(autoincrement())
    name             String
    email            String           @unique
    status           CustomerStatus   @default(ACTIVE)
    gender           Gender?
    phone            String           @unique
    birthDate        String?
    password         String
    created          DateTime         @default(now())
    updated          DateTime         @default(now())
    reviews          Review[]
    customerAdresses CustomerAdress[]
    orders           Order[]
}

model CustomerAdress {
    id              Int      @id @default(autoincrement())
    streetName      String
    approach        String
    floor           String
    doorCode        String
    apartmentNumber String
    comment         String   @db.VarChar(255)
    isDefault       Boolean  @default(false)
    customerId      Int
    customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
    created         DateTime @default(now())
    updated         DateTime @default(now())
}

model Order {
    id                         Int           @id @default(autoincrement())
    paymentMethod              PaymentMethod
    paymentStatus              PaymentStatus @default(PENDING)
    change                     String?
    restaurantToClientMessages String[]
    orderNote                  String?
    orderItems                 Json
    orderTotal                 Int
    orderType                  OrderType
    orderStatus                OrderStatus   @default(ORDER_NOT_CONFIRMED)
    customerId                 Int
    customer                   Customer      @relation(fields: [customerId], references: [id])
    orderChosenTime            String
    orderReceivingTime         String
    orderCompletionTime        String?
    created                    DateTime      @default(now())
}

model Application {
    id                Int             @id @default(autoincrement())
    role              ApplicantRole
    photoUrl          String          @db.Text()
    photoId           String
    firstname         String          @db.VarChar(25)
    lastname          String          @db.VarChar(25)
    email             String
    phoneNumber       String          @db.VarChar(13)
    gender            Gender
    birthDate         DateTime
    passportNumber    String
    passportPhotoUrl  String          @db.Text()
    passportPhotoId   String
    noticePeriod      String
    dateOfJoining     DateTime
    applicationStatus ApplicantStatus @default(PENDING)
    education         Education
    martialStatus     MarriageStatus
    experiences       Json[]
    languages         Json[]
    computerSkills    String[]
    source            String
    hasBankAccount    Boolean         @default(false)
    bankAccountName   String?
    resumeUrl         String          @db.Text()
    resumeId          String
    drivers           Driver[]
    managers          Manager[]
    teamMembers       TeamMember[]
    created           DateTime        @default(now())
}

model Manager {
    id              Int         @id @default(autoincrement())
    panPhoto        String      @db.Text()
    panPhotoId      String
    panNumber       String      @db.Text()
    currentEmployer String      @db.Text()
    currentRole     String      @db.Text()
    currentLocation String      @db.Text()
    currentCTC      String      @db.Text()
    applicantId     Int
    application     Application @relation(fields: [applicantId], references: [id], onDelete: Cascade)
}

model Driver {
    id             Int            @id @default(autoincrement())
    drivingLicence DrivingLicense
    licenseNumber  String         @db.Text()
    employmentType EmploymentType
    applicantId    Int
    application    Application    @relation(fields: [applicantId], references: [id], onDelete: Cascade)
}

model TeamMember {
    id             Int            @id @default(autoincrement())
    employmentType EmploymentType
    applicantId    Int
    application    Application    @relation(fields: [applicantId], references: [id], onDelete: Cascade)
}

model Employee {
    id                Int            @id @default(autoincrement())
    firstname         String
    lastname          String
    email             String         @unique
    phoneNumber       String         @unique @db.VarChar(13)
    photo             String
    photo_id          String
    role              ApplicantRole
    salary            Int
    city              String
    addressLine1      String
    addressLine2      String?
    maritalStatus     MarriageStatus
    gender            Gender
    birthDate         DateTime
    created           DateTime       @default(now())
    updated           DateTime       @default(now())
    leaveAmount       Int            @default(0)
    emergancyContacts Json[]
    employeeNotes     Json[]
    leaveDays         Json[]
}

model Message {
    id          Int      @id @default(autoincrement())
    firstname   String
    lastname    String
    phoneNumber String   @db.VarChar(12)
    email       String
    subject     String
    message     String
    date        DateTime @default(now())
}

model Review {
    id            Int           @id @default(autoincrement())
    reviewSubject ReviewSubject
    message       String
    status        ReviewStatus  @default(PRIVATE)
    stars         Int
    customerId    Int
    customer      Customer      @relation(fields: [customerId], references: [id])
    date          DateTime      @default(now())
}

model Feedback {
    id                Int                @id @default(autoincrement())
    type              FeedbackType
    fullName          String             @db.VarChar(50)
    gender            Gender
    email             String
    mobileNumber      String
    status            FeedbackStatus     @default(NOT_EXAMINED)
    feedback          String
    rating            Float
    experience        String
    created           DateTime           @default(now())
    deliveryFeedbacks DeliveryFeedback[]
    dineInFeedbacks   DineInFeedback[]
}

model DeliveryFeedback {
    id               Int        @id @default(autoincrement())
    dateOfOrder      DateTime
    timeOfOrder      String
    feedbackOn       FeedbackOn
    feedbackOnChoice String
    feedbackId       Int
    feedback         Feedback   @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
}

model DineInFeedback {
    id          Int         @id @default(autoincrement())
    dateOfVisit DateTime
    timeOfVisit String
    visitAmount VisitAmount
    feedbackId  Int
    feedback    Feedback    @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
}

model Category {
    id          Int        @id @default(autoincrement())
    name        String     @unique @db.VarChar(50)
    description String     @db.VarChar(150)
    photo       String
    photo_id    String
    created     DateTime   @default(now())
    updated     DateTime   @default(now())
    pizzas      Pizza[]
    dips        Dip[]
    menuItems   MenuItem[]
}

model Topping {
    id           Int                 @id @default(autoincrement())
    name         String              @db.VarChar(50)
    type         ToppingCategoryType
    forPizzaSize ToppingForPizzaSize
    light        Int                 @default(0)
    standard     Int                 @default(0)
    double       Int                 @default(0)
    extra        Int                 @default(0)
    created      DateTime            @default(now())
    updated      DateTime            @default(now())
}

model Pizza {
    id         Int         @id @default(autoincrement())
    name       String      @unique @db.VarChar(100)
    vegan      Boolean     @default(false)
    soldAmount Int         @default(0)
    status     Status      @default(PENDING)
    spiceLevel SpiceLevel
    pizzaSizes PizzaSize[]
    created    DateTime    @default(now())
    updated    DateTime    @default(now())
    categoryId Int
    category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model PizzaSize {
    id               Int    @id @default(autoincrement())
    size             Size
    price            String
    orderedAmount    Int    @default(0)
    photo            String
    photo_id         String
    circumfarance    String
    weight           String
    nutritionalValue Json
    slices           Json[]
    crusts           Json[]
    edges            Json[]
    standardToppings Json[]
    extraToppings    Json[]
    pizzaId          Int
    pizza            Pizza  @relation(fields: [pizzaId], references: [id], onDelete: Cascade)
}

model MenuItem {
    id            Int          @id @default(autoincrement())
    type          MenuItemType
    name          String       @unique @db.VarChar(70)
    description   String       @db.VarChar(250)
    vegan         Boolean      @default(false)
    soldAmount    Int          @default(0)
    status        Status       @default(PENDING)
    calories      String
    fats          String
    proteins      String
    carbohydrates String
    spiceLevel    SpiceLevel   @default(NOT_SPICY)
    pieces        Json[]
    created       DateTime     @default(now())
    updated       DateTime     @default(now())
    categoryId    Int
    category      Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Dip {
    id               Int      @id @default(autoincrement())
    dataType         String   @default("DIP")
    type             String   @unique @db.VarChar(50)
    price            Int      @default(0)
    photo            String
    photo_id         String
    vegan            Boolean  @default(false)
    soldAmount       Int      @default(0)
    status           Status   @default(PENDING)
    weight           Float
    nutritionalValue Json
    created          DateTime @default(now())
    updated          DateTime @default(now())
    categoryId       Int
    category         Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

enum Role {
    ADMIN
    SUB_ADMIN
    DRIVER
}

enum Size {
    SMALL
    MEDIUM
    LARGE
}

enum Status {
    PENDING
    ACTIVE
    INACTIVE
}

enum UserStatus {
    PENDING
    ACTIVE
    BLOCKED
}

enum CustomerStatus {
    ACTIVE
    BLOCKED
}

enum Gender {
    MALE
    FEMALE
}

enum ApplicantRole {
    TEAM_MEMBER
    DRIVER
    MANAGER
    AREA_COACH
}

enum ApplicantStatus {
    PENDING
    ACCEPTED
    REJECTED
}

enum Education {
    NO_EDUCATION
    HIGH_SCHOOL
    GRADUATE
    POST_GRADUATE
}

enum MarriageStatus {
    MARRIED
    SINGLE
}

enum DrivingLicense {
    A1
    A
    B
    C
}

enum EmploymentType {
    PART_TIME
    FULL_TIME
}

enum ContactType {
    PRIMARY
    SECONDARY
    TERTIARY
    LEASE_IMPORTANT
}

enum ReviewSubject {
    DRIVER
    STUFF
    MANAGER
    RESTAURANT
    FOOD
    OTHER
}

enum ReviewStatus {
    PUBLIC
    PRIVATE
}

enum FeedbackType {
    DELIVERY
    DINE_IN
}

enum FeedbackOn {
    HYGIENE
    HOSPITALITY
    ACCURACY
    SPEED
    CALL_CENTRE
    PRODUCT_QUALITY
    ONLINE_ORDER
}

enum VisitAmount {
    WEEKLY
    MONTHLY
    OCCASIONALY
    FIRST_TIME
}

enum FeedbackStatus {
    NOT_EXAMINED
    EXAMINED
}

enum ToppingCategoryType {
    STANDARD
    EXTRA
}

enum ToppingForPizzaSize {
    SMALL
    MEDIUM
    LARGE
}

enum SpiceLevel {
    NOT_SPICY
    MILD
    HOT
}

enum MenuItemType {
    DRINKS
    SNACKS
    DESSERTS
    SALADS
}

enum PaymentMethod {
    CASH
    CARD
}

enum PaymentStatus {
    PENDING
    APPROVED
    DECLINED
}

enum OrderType {
    DELIVERY
    PICKUP
}

enum OrderStatus {
    ORDER_NOT_CONFIRMED
    ORDER_CANCELLED
    ORDER_CONFIRMED
    ORDER_BEING_PREPARED
    ORDER_BOXED
    ORDER_DELIVERED
    ORDER_PICKED_UP
}
